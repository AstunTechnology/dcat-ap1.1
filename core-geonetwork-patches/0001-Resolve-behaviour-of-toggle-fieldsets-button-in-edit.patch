From 655ef31e95ac57f0169f518ac6fe080309e558df Mon Sep 17 00:00:00 2001
From: Gustaaf Vandeboel <gustaaf.vandeboel@gim.be>
Date: Mon, 20 Aug 2018 02:07:07 +0200
Subject: [PATCH] Resolve behaviour of toggle fieldsets button in editor

---
 .../metadatamanager/EditorService.js          |   2 +
 .../components/utility/UtilityDirective.js    |  45 +--
 .../catalog/js/edit/EditorController.js       |  18 +
 .../xslt/common/base-variables-metadata.xsl   |   6 +
 .../webapp/xslt/ui-metadata/edit/edit.xsl     |   2 +
 .../webapp/xslt/ui-metadata/form-builder.xsl  | 330 +++++++++---------
 .../xslt/ui-metadata/form-configurator.xsl    |  48 +--
 7 files changed, 240 insertions(+), 211 deletions(-)

diff --git a/web-ui/src/main/resources/catalog/components/metadatamanager/EditorService.js b/web-ui/src/main/resources/catalog/components/metadatamanager/EditorService.js
index 5cf653bfe0..dac3133897 100644
--- a/web-ui/src/main/resources/catalog/components/metadatamanager/EditorService.js
+++ b/web-ui/src/main/resources/catalog/components/metadatamanager/EditorService.js
@@ -357,6 +357,8 @@
                getInputValue('displayTooltips') == 'true',
                displayTooltipsMode:
                getInputValue('displayTooltipsMode') || '',
+               displaySections:
+               getInputValue('displaySections') == 'true',
                schema: getInputValue('schema'),
                version: getInputValue('version'),
                tab: getInputValue('currTab'),
diff --git a/web-ui/src/main/resources/catalog/components/utility/UtilityDirective.js b/web-ui/src/main/resources/catalog/components/utility/UtilityDirective.js
index b9049e865a..0542ea851d 100644
--- a/web-ui/src/main/resources/catalog/components/utility/UtilityDirective.js
+++ b/web-ui/src/main/resources/catalog/components/utility/UtilityDirective.js
@@ -540,20 +540,27 @@
    *
    * Add the event attribute to define a custom event.
    */
-  module.directive('gnToggle', [
-    function() {
+  module.directive('gnToggle', [ 'gnCurrentEdit',
+    function(gnCurrentEdit) {
       return {
         restrict: 'A',
         template: '<button title="{{\'gnToggle\' | translate}}">' +
-            '<i class="fa fa-fw fa-angle-double-up"/>&nbsp;' +
+            '<i class="fa fa-fw {{gnCurrentEdit.displaySections === true ? \'fa-angle-double-up\' : \'fa-angle-double-down\'}}"/>&nbsp;' +
             '</button>',
         link: function linkFn(scope, element, attr) {
           var selector = attr['gnSectionToggle'] ||
               'form > fieldset > legend[data-gn-slide-toggle]',
               event = attr['event'] || 'click';
           element.on('click', function() {
+            scope.gnCurrentEdit.displaySections = !(scope.gnCurrentEdit.displaySections === true);
+            $("#displaySections")[0].value = scope.gnCurrentEdit.displaySections;
             $(selector).each(function(idx, elem) {
-              $(elem).trigger(event);
+              if (scope.gnCurrentEdit.displaySections === true && elem.className.contains('collapsed')) {
+                $(elem).trigger(event);
+              }
+              if (scope.gnCurrentEdit.displaySections === false && !elem.className.contains('collapsed')) {
+                $(elem).trigger(event);
+              }
             });
             $(this).find('i').toggleClass(
                 'fa-angle-double-up fa-angle-double-down');
@@ -1503,44 +1510,20 @@
         },
         link: function(scope, element, attrs) {
           if ((scope.text.indexOf('link') == 0) &&
-              (scope.text.split('|').length == 3)) {
+            (scope.text.split('|').length == 3)) {
             scope.link = scope.text.split('|')[1];
             scope.value = scope.text.split('|')[2];
 
             element.replaceWith($compile('<a data-ng-href="{{link}}" ' +
-                'data-ng-bind-html="value | newlines"></a>')(scope));
+              'data-ng-bind-html="value | newlines"></a>')(scope));
           } else {
 
             element.replaceWith($compile('<span ' +
-                'data-ng-bind-html="text | linky | newlines"></span>')(scope));
+              'data-ng-bind-html="text | linky | newlines"></span>')(scope));
           }
         }
 
       };
     }
   ]);
-
-  /**
-   * @ngdoc directive
-   * @name gn_utility.directive:gnStringToNumber
-   *
-   * @description
-   * Converts a string with a number value to a number.
-   * To be used for example in input type=number fields
-   * when the model value is stored in a string field.
-   *
-   */
-  module.directive('gnStringToNumber', function() {
-    return {
-      require: 'ngModel',
-      link: function (scope, element, attrs, ngModel) {
-        ngModel.$parsers.push(function (value) {
-          return '' + value;
-        });
-        ngModel.$formatters.push(function (value) {
-          return parseFloat(value);
-        });
-      }
-    };
-  });
 })();
diff --git a/web-ui/src/main/resources/catalog/js/edit/EditorController.js b/web-ui/src/main/resources/catalog/js/edit/EditorController.js
index d5751879fb..de8bacd1f9 100644
--- a/web-ui/src/main/resources/catalog/js/edit/EditorController.js
+++ b/web-ui/src/main/resources/catalog/js/edit/EditorController.js
@@ -213,6 +213,12 @@
                   //  }
                   //  return defaultTab;
                   //}
+
+                  //Default tab id for dcat-ap metadata is "defaultDataset" in order to differentiate it's label
+                  //with "default" view.
+                  'dcat-ap': function (md) {
+                    return 'defaultDataset';
+                  }
                 };
                 if (schemaCustomConfig) {
                   var fn = schemaCustomConfig[$scope.mdSchema];
@@ -235,6 +241,7 @@
                   displayAttributes: $location.search()['displayAttributes'] === 'true',
                   displayTooltips: $location.search()['displayTooltips'] === 'true',
                   displayTooltipsMode: $location.search()['displayTooltipsMode'] || '',
+                  displaySections: ($location.search()['displaySections'] || 'true') === 'true',
                   compileScope: $scope,
                   formScope: $scope.$new(),
                   sessionStartTime: moment(),
@@ -267,6 +274,9 @@
                     + gnCurrentEdit.displayTooltipsMode ;
                 }
 
+                editorFormUrl += '&displaySections='
+                	+ (gnCurrentEdit.displaySections === true ? 'true' : 'false');
+
                 gnEditor.load(editorFormUrl).then(function() {
                   // $scope.onFormLoad();
                   // Once the editor form is loaded, then
@@ -375,6 +385,14 @@
           gnUtilityService.scrollTo();
         }
 
+        // If switching between default and advanced view (or the opposite)
+        // Stay on the current tab (Dataset/Distribution)
+        if ($('#currTab')[0].value === 'defaultDistribution' && tabIdentifier === 'advancedDataset') {
+          tabIdentifier = 'advancedDistribution';
+        } else if ($('#currTab')[0].value === 'advancedDistribution' && tabIdentifier === 'defaultDataset') {
+          tabIdentifier = 'defaultDistribution';
+        }
+
         $('#currTab')[0].value = tabIdentifier;
         $('#flat')[0].value = mode === 'flat';
 
diff --git a/web/src/main/webapp/xslt/common/base-variables-metadata.xsl b/web/src/main/webapp/xslt/common/base-variables-metadata.xsl
index a2327ebd49..0ba78db9f2 100644
--- a/web/src/main/webapp/xslt/common/base-variables-metadata.xsl
+++ b/web/src/main/webapp/xslt/common/base-variables-metadata.xsl
@@ -135,6 +135,12 @@
                         else if ($viewConfig/@displayTooltipsMode)
                         then $viewConfig/@displayTooltipsMode
                         else ''"/>
+  <xsl:variable name="isDisplayingSections"
+                select="if (/root/request/displaySections)
+                        then /root/request/displaySections = 'true'
+                        else if ($viewConfig/@displaySections)
+                        then $viewConfig/@displaySections = 'true'
+                        else true()"/>
 
 
 </xsl:stylesheet>
diff --git a/web/src/main/webapp/xslt/ui-metadata/edit/edit.xsl b/web/src/main/webapp/xslt/ui-metadata/edit/edit.xsl
index a16e5db534..26c8984744 100644
--- a/web/src/main/webapp/xslt/ui-metadata/edit/edit.xsl
+++ b/web/src/main/webapp/xslt/ui-metadata/edit/edit.xsl
@@ -100,6 +100,8 @@
                  value="{$isDisplayingTooltips = true()}"/>
           <input type="hidden" id="displayTooltipsMode" name="displayTooltipsMode"
                  value="{$displayTooltipsMode}"/>
+          <input type="hidden" id="displaySections" name="displaySections"
+                 value="{$isDisplayingSections = true()}"/>
           <input type="hidden" id="minor" name="minor" value="{$isMinorEdit}"/>
           <input type="hidden" id="flat" name="flat" value="{$isFlatMode}"/>
           <input type="hidden" id="showvalidationerrors" name="showvalidationerrors"
diff --git a/web/src/main/webapp/xslt/ui-metadata/form-builder.xsl b/web/src/main/webapp/xslt/ui-metadata/form-builder.xsl
index 301583d4b5..9b3ddfb8ea 100644
--- a/web/src/main/webapp/xslt/ui-metadata/form-builder.xsl
+++ b/web/src/main/webapp/xslt/ui-metadata/form-builder.xsl
@@ -99,9 +99,13 @@
     This class could be used to customize style of first or following
     element of same kind. eg. do not display label. -->
     <xsl:param name="isFirst" required="no" as="xs:boolean" select="true()"/>
+    <xsl:param name="isForceLabel" required="no" as="xs:boolean" select="false()"/>
 
     <xsl:param name="isReadOnly" required="no" as="xs:boolean" select="false()"/>
 
+    <!-- Mandatory field inside optional fieldset. Black '*' instead of red -->
+    <xsl:param name="subRequired" required="no" as="xs:boolean" select="false()"/>
+
     <xsl:variable name="isMultilingual" select="count($value/values) > 0"/>
 
     <xsl:variable name="isoType" select="if (../@gco:isoType) then ../@gco:isoType else ''"/>
@@ -114,8 +118,8 @@
     <xsl:variable name="isRequired" as="xs:boolean">
       <xsl:choose>
         <xsl:when
-          test="($parentEditInfo and $parentEditInfo/@min = 1 and $parentEditInfo/@max = 1) or
-          (not($parentEditInfo) and $editInfo and $editInfo/@min = 1 and $editInfo/@max = 1)">
+          test="($parentEditInfo and $parentEditInfo/@min = 1) or
+          (not($parentEditInfo) and $editInfo and $editInfo/@min = 1)">
           <xsl:value-of select="true()"/>
         </xsl:when>
         <xsl:when test="gn-fn-metadata:getLabel($schema, name(), $labels, name(..),$isoType, $xpath)/condition = 'mandatory'">
@@ -141,14 +145,14 @@
             <xsl:choose>
               <xsl:when test="$isMultilingual">
                 <xsl:attribute name="{$type}">
-                {
-                <xsl:for-each select="$value/values/value">
-                  <xsl:sort select="@lang"/>
-                  "<xsl:value-of select="@lang" />":
-                  {"ref" : "<xsl:value-of select="@ref" />", "value": "<xsl:value-of select="." />"}
-                  <xsl:if test="position() != last()">,</xsl:if>
-                </xsl:for-each>
-                }
+                  {
+                  <xsl:for-each select="$value/values/value">
+                    <xsl:sort select="@lang"/>
+                    "<xsl:value-of select="@lang" />":
+                    {"ref" : "<xsl:value-of select="@ref" />", "value": "<xsl:value-of select="." />"}
+                    <xsl:if test="position() != last()">,</xsl:if>
+                  </xsl:for-each>
+                  }
                 </xsl:attribute>
               </xsl:when>
               <xsl:otherwise>
@@ -175,7 +179,7 @@
       <xsl:otherwise>
 
         <div
-          class="form-group gn-field gn-{substring-after(name(), ':')} {if ($isRequired) then 'gn-required' else ''} {if ($label/condition) then concat('gn-', $label/condition) else ''} {if ($isFirst) then '' else 'gn-extra-field'}"
+          class="form-group gn-field gn-{substring-after(name(), ':')} {if ($isRequired and $isFirst) then (if ($subRequired) then 'gn-sub-required' else 'gn-required') else ''} {if ($label/condition) then concat('gn-', $label/condition) else ''} {if ($isFirst or $isForceLabel) then '' else 'gn-extra-field'}"
           id="gn-el-{$editInfo/@ref}"
           data-gn-field-highlight="">
           <label
@@ -211,7 +215,7 @@
                       <xsl:with-param name="type" select="$type"/>
                       <xsl:with-param name="directiveAttributes" select="$directiveAttributes"/>
                       <xsl:with-param name="tooltip" select="$tooltip"/>
-                      <xsl:with-param name="isRequired" select="$isRequired"/>
+                      <xsl:with-param name="isRequired" select="$isRequired and $isFirst"/>
                       <xsl:with-param name="isReadOnly" select="$isReadOnly"/>
                       <xsl:with-param name="isDisabled" select="$isDisabled"/>
                       <xsl:with-param name="editInfo" select="$editInfo"/>
@@ -257,7 +261,7 @@
                   <xsl:with-param name="directiveAttributes" select="$directiveAttributes"/>
                   <xsl:with-param name="tooltip"
                                   select="concat($schema, '|', name(.), '|', name(..), '|', $xpath)"/>
-                  <xsl:with-param name="isRequired" select="$isRequired"/>
+                  <xsl:with-param name="isRequired" select="$isRequired and $isFirst"/>
                   <xsl:with-param name="isDisabled" select="$isDisabled"/>
                   <xsl:with-param name="isReadOnly" select="$isReadOnly"/>
                   <xsl:with-param name="editInfo" select="$editInfo"/>
@@ -313,6 +317,7 @@
         <xsl:with-param name="childEditInfo" select="$parentEditInfo"/>
         <xsl:with-param name="parentEditInfo" select="../gn:element"/>
         <xsl:with-param name="isFirst" select="false()"/>
+        <xsl:with-param name="isForceLabel" select="$isForceLabel"/>
         <xsl:with-param name="isHidden" select="true()"/>
         <xsl:with-param name="name" select="name()"/>
       </xsl:call-template>
@@ -351,6 +356,9 @@
       <null/>
     </xsl:param>
     <xsl:param name="isDisabled" select="ancestor::node()[@xlink:href]"/>
+    <!-- Collapsed fieldsets reopens when saving, this param can be
+    used to collapse again the fieldset after loading -->
+    <xsl:param name="isSlideToggle" select="false()" required="no"/>
 
 
     <xsl:variable name="hasXlink" select="@xlink:href"/>
@@ -360,7 +368,7 @@
               class="{if ($hasXlink) then 'gn-has-xlink' else ''} gn-{substring-after(name(), ':')}">
 
       <legend class="{$cls}"
-              data-gn-slide-toggle=""
+              data-gn-slide-toggle="{$isSlideToggle}"
               data-gn-field-tooltip="{$schema}|{name()}|{name(..)}|">
         <!--
          The toggle title is in conflict with the element title
@@ -443,140 +451,146 @@
 
     <xsl:variable name="tagId" select="generate-id()"/>
 
-    <!-- <xsl:message>!render-element-template-field <xsl:copy-of select="$keyValues"/>
-        <xsl:value-of select="$name"/>/tpl:
-        <xsl:copy-of select="$template"/>/
-        <xsl:value-of select="$id"/>/
-        <xsl:value-of select="$isExisting"/>/
-        <xsl:value-of select="$id"/>
-      </xsl:message>-->
-
     <xsl:variable name="firstFieldKey"
                   select="$template/values/key[position() = 1]/@label"/>
 
     <div
-      class="form-group gn-field gn-{$firstFieldKey} {if ($isFirst) then '' else 'gn-extra-field'} {if ($isAddAction) then 'gn-add-field' else ''} {$class}"
+      class="form-group gn-field gn-{$firstFieldKey} gn-extra-field {if ($isAddAction) then 'gn-add-field' else ''} {$class}"
       id="gn-el-{if ($refToDelete) then $refToDelete/@ref else generate-id()}"
       data-gn-field-highlight="">
 
-      <label class="col-sm-2 control-label">
+      <!--label class="col-sm-2 control-label">
         <xsl:value-of select="$name"/>&#160;
-      </label>
-      <div class="col-sm-9">
-        <!-- Create an empty input to contain the data-gn-field-tooltip
-        key which is used to check if an element
-        is the first element of its kind in the form. The key for a template
-        field is {schemaIdentifier}|{firstTemplateFieldKey} -->
-        <input type="hidden"
-               data-gn-field-tooltip="{$schema}|{$firstFieldKey}"/>
-
-        <!-- Create a title indicating that the element is missing in the current
-        record. A checkbox display the template field to be populated. -->
-        <xsl:if test="$isMissingLabel != ''">
-          <div class="checkbox">
-            <label>
-              <input type="checkbox"
-                     id="gn-template-unset-{$tagId}"
-                     checked="checked"/>
-              <xsl:value-of select="$isMissingLabel"/>
-            </label>
-          </div>
-        </xsl:if>
-        <div id="{$tagId}">
-          <xsl:if test="$isMissingLabel != ''">
-            <xsl:attribute name="class" select="'hidden'"/>
-          </xsl:if>
+      </label-->
+      <!--div class="col-sm-9"-->
+      <!-- Create an empty input to contain the data-gn-field-tooltip
+      key which is used to check if an element
+      is the first element of its kind in the form. The key for a template
+      field is {schemaIdentifier}|{firstTemplateFieldKey} -->
+      <input type="hidden"
+             data-gn-field-tooltip="{$schema}|{$firstFieldKey}"/>
+
+      <!-- Create a title indicating that the element is missing in the current
+      record. A checkbox display the template field to be populated. -->
+      <xsl:if test="$isMissingLabel != ''">
+        <div class="checkbox">
+          <label>
+            <input type="checkbox"
+                   id="gn-template-unset-{$tagId}"
+                   checked="checked"/>
+            <xsl:value-of select="$isMissingLabel"/>
+          </label>
+        </div>
+      </xsl:if>
+      <div id="{$tagId}">
+        <xsl:attribute name="class">
+          <xsl:if test="($refToDelete and $refToDelete/@min = 1 and $refToDelete/@max = 1) or (@required and $isFirst)">gn-required </xsl:if>
+          <xsl:if test="$isMissingLabel != ''">hidden</xsl:if>
+        </xsl:attribute>
 
-          <xsl:if test="$hasAddAction">
-            <xsl:choose>
-              <xsl:when test="$addDirective != ''">
-                <!-- The add directive should take care of building the form
-                for adding the element. eg. adding a textarea with an XML snippet
-                in.
-                The default add action (ie. without directive), trigger add based
-                on schema info. It may stop on choices (eg. bbox or polygon for extent)
-                TODO: add a textarea and
-                use the default XML template defined in the editor configuration.
-                -->
-                <div>
-                  <xsl:attribute name="{$addDirective}"/>
-                  <xsl:attribute name="data-dom-id" select="$id"/>
-                  <xsl:attribute name="data-element-name" select="$qname"/>
-                  <xsl:attribute name="data-element-ref" select="$parentRef"/>
-                  <xsl:copy-of select="$directiveAttributes/@*"/>
-                </div>
-              </xsl:when>
-              <xsl:otherwise>
+        <xsl:if test="$hasAddAction">
+          <xsl:choose>
+            <xsl:when test="$addDirective != ''">
+              <!-- The add directive should take care of building the form
+              for adding the element. eg. adding a textarea with an XML snippet
+              in.
+              The default add action (ie. without directive), trigger add based
+              on schema info. It may stop on choices (eg. bbox or polygon for extent)
+              TODO: add a textarea and
+              use the default XML template defined in the editor configuration.
+              -->
+              <div>
+                <xsl:attribute name="{$addDirective}"/>
+                <xsl:attribute name="data-dom-id" select="$id"/>
+                <xsl:attribute name="data-element-name" select="$qname"/>
+                <xsl:attribute name="data-element-ref" select="$parentRef"/>
+                <xsl:copy-of select="$directiveAttributes/@*"/>
+              </div>
+            </xsl:when>
+            <xsl:otherwise>
+              <xsl:variable name="hasMultipleChoice"
+                            select="count($template/snippet) gt 1"/>
 
-                <xsl:variable name="hasMultipleChoice"
-                              select="count($template/snippet) gt 1"/>
+              <label
+                class="col-sm-2 control-label">
+                <!--xsl:value-of select="$name"/-->&#160;
+              </label>
+              <div class="col-sm-9 btn-group nopadding-in-table" data-gn-template-field-add-button="{$id}">
+                <xsl:if test="$hasMultipleChoice">
+                  <xsl:attribute name="data-has-choice">true</xsl:attribute>
+                </xsl:if>
 
-                <div class="btn-group" data-gn-template-field-add-button="{$id}">
+                <button class="btn btn-default {if ($hasMultipleChoice) then 'dropdown-toggle' else ''}">
                   <xsl:if test="$hasMultipleChoice">
-                    <xsl:attribute name="data-has-choice">true</xsl:attribute>
+                    <xsl:attribute name="data-toggle">dropdown</xsl:attribute>
+                    <xsl:attribute name="aria-haspopup">true</xsl:attribute>
+                    <xsl:attribute name="aria-expanded">false</xsl:attribute>
+                  </xsl:if>
+                  <i class="{if ($btnClass != '') then $btnClass else 'fa fa-plus'}"/>
+                  <xsl:if test="$btnLabel != ''">&#160;
+                    <span>
+                      <xsl:value-of select="$btnLabel"/>
+                    </span>
                   </xsl:if>
 
-                  <button class="btn btn-default {if ($hasMultipleChoice) then 'dropdown-toggle' else ''}">
-                    <xsl:if test="$hasMultipleChoice">
-                      <xsl:attribute name="data-toggle">dropdown</xsl:attribute>
-                      <xsl:attribute name="aria-haspopup">true</xsl:attribute>
-                      <xsl:attribute name="aria-expanded">false</xsl:attribute>
-                    </xsl:if>
-                    <i class="{if ($btnClass != '') then $btnClass else 'fa fa-plus'}"/>
-                    <xsl:if test="$btnLabel != ''">&#160;
-                      <span>
-                        <xsl:value-of select="$btnLabel"/>
-                      </span>
-                    </xsl:if>
-
-                    <xsl:if test="$hasMultipleChoice">
-                      <span class="caret"></span>
-                    </xsl:if>
-                  </button>
                   <xsl:if test="$hasMultipleChoice">
-                    <!-- A combo with the list of snippet available -->
-                    <ul class="dropdown-menu">
-                      <xsl:for-each select="$template/snippet">
-                        <xsl:variable name="label" select="@label"/>
-                        <li><a id="{concat($id, $label)}">
-                          <xsl:value-of select="if ($strings/*[name() = $label] != '') then $strings/*[name() = $label] else $label"/>
-                        </a></li>
-                      </xsl:for-each>
-                    </ul>
+                    <span class="caret"></span>
                   </xsl:if>
-                </div>
-              </xsl:otherwise>
-            </xsl:choose>
-          </xsl:if>
+                </button>
+                <xsl:if test="$hasMultipleChoice">
+                  <!-- A combo with the list of snippet available -->
+                  <ul class="dropdown-menu">
+                    <xsl:for-each select="$template/snippet">
+                      <xsl:variable name="label" select="@label"/>
+                      <li><a id="{concat($id, $label)}">
+                        <xsl:value-of select="if ($strings/*[name() = $label] != '') then $strings/*[name() = $label] else $label"/>
+                      </a></li>
+                    </xsl:for-each>
+                  </ul>
+                </xsl:if>
+              </div>
+            </xsl:otherwise>
+          </xsl:choose>
+        </xsl:if>
 
 
-          <xsl:if test="not($addDirective)">
-            <div>
-              <xsl:if test="$hasAddAction">
-                <xsl:attribute name="class">hidden</xsl:attribute>
-              </xsl:if>
-              <!-- For each template field create an input.
-              The directive takes care of setting values. -->
-              <xsl:for-each select="$template/values/key">
-                <xsl:variable name="valueLabelKey" select="@label"/>
-                <xsl:variable name="keyRequired" select="@required"/>
-                <xsl:variable name="helper"
-                              select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/helper else ''"/>
-                <xsl:variable name="codelist"
-                              select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/codelist else ''"/>
-                <xsl:variable name="readonly"
-                              select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/readonly else ''"/>
+        <xsl:if test="not($addDirective)">
+          <div>
+            <xsl:if test="$hasAddAction">
+              <xsl:attribute name="class">hidden</xsl:attribute>
+            </xsl:if>
+            <!-- For each template field create an input.
+            The directive takes care of setting values. -->
+            <xsl:for-each select="$template/values/key">
+              <xsl:variable name="valueLabelKey" select="@label"/>
+              <xsl:variable name="keyRequired" select="(($refToDelete/@* and $refToDelete/@min = 1) or @required) and $isFirst"/>
+              <xsl:variable name="helper"
+                            select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/helper else ''"/>
+              <xsl:variable name="codelist"
+                            select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/codelist else ''"/>
+              <xsl:variable name="readonly"
+                            select="if ($keyValues) then $keyValues/field[@name = $valueLabelKey]/readonly else ''"/>
+
+              <!--div class="form-group gn-field {if ($keyRequired) then 'gn-required' else ''}"
+                      id="gn-el-{generate-id()}"
+                      data-gn-field-highlight=""-->
+              <label
+                for="{$id}_{@label}"
+                class="col-sm-2 control-label {if ($keyRequired) then 'gn-required' else ''}">
+                <xsl:value-of select="$strings/*[name() = $valueLabelKey]"/>
+              </label>
+
+              <div class="col-sm-9 gn-value nopadding-in-table">
 
                 <!-- Only display label if more than one key to match -->
-                <xsl:if test="count($template/values/key) > 1">
+                <!--xsl:if test="count($template/values/key) > 1">
                   <label for="{$id}_{@label}">
-                    <!-- if key has an attr required="true"-->
                     <xsl:if test="$keyRequired">
                       <xsl:attribute name="class" select="'gn-required'"/>
                     </xsl:if>
                     <xsl:value-of select="$strings/*[name() = $valueLabelKey]"/>
                   </label>
-                </xsl:if>
+                </xsl:if-->
 
                 <xsl:choose>
                   <xsl:when test="@use = 'textarea'">
@@ -643,10 +657,10 @@
                         <xsl:attribute name="{$directiveAttributeName}">
                           <xsl:choose>
                             <xsl:when test="$keyValues and
-                                            count($keyValues/field[@name = $valueLabelKey]/
-                              directiveAttributes[@name = $directiveAttributeName]) > 0">
+                                              count($keyValues/field[@name = $valueLabelKey]/
+                                directiveAttributes[@name = $directiveAttributeName]) > 0">
                               <xsl:value-of select="$keyValues/field[@name = $valueLabelKey]/
-                              directiveAttributes[@name = $directiveAttributeName]/text()"/>
+                                directiveAttributes[@name = $directiveAttributeName]/text()"/>
                             </xsl:when>
                             <xsl:when test="starts-with(., 'eval#')">
                               <!-- Empty value for XPath to evaluate. -->
@@ -684,47 +698,46 @@
                   <xsl:call-template name="render-form-field-helper">
                     <xsl:with-param name="elementRef" select="$elementName"/>
                     <xsl:with-param name="relatedElement" select="if ($helper/@rel)
-                      then concat($elementName, '_', substring-after($helper/@rel, ':'))
-                      else ''"/>
+                        then concat($elementName, '_', substring-after($helper/@rel, ':'))
+                        else ''"/>
                     <xsl:with-param name="dataType" select="'text'"/>
                     <xsl:with-param name="listOfValues" select="$helper"/>
                     <xsl:with-param name="tooltip" select="concat($schema, '|', @tooltip)"/>
                   </xsl:call-template>
                 </xsl:if>
+              </div>
+            </xsl:for-each>
 
-              </xsl:for-each>
-
-              <xsl:if test="not($isExisting)">
-                <input class="gn-debug" type="text" name="{$xpathFieldId}" value="{@xpath}"/>
-              </xsl:if>
+            <xsl:if test="not($isExisting)">
+              <input class="gn-debug" type="text" name="{$xpathFieldId}" value="{@xpath}"/>
+            </xsl:if>
 
-              <xsl:variable name="hasMultipleChoice"
-                            select="count($template/snippet) gt 1"/>
+            <xsl:variable name="hasMultipleChoice"
+                          select="count($template/snippet) gt 1"/>
 
-              <xsl:if test="$hasMultipleChoice">
-                <xsl:for-each select="$template/snippet">
-                  <textarea id="{concat($id, @label, '-value')}">
-                    <xsl:value-of select="saxon:serialize(*,
+            <xsl:if test="$hasMultipleChoice">
+              <xsl:for-each select="$template/snippet">
+                <textarea id="{concat($id, @label, '-value')}">
+                  <xsl:value-of select="saxon:serialize(*,
                                         'default-serialize-mode')"/>
-                  </textarea>
-                </xsl:for-each>
-              </xsl:if>
+                </textarea>
+              </xsl:for-each>
+            </xsl:if>
 
-              <textarea class="form-control gn-debug"
-                        name="{$id}"
-                        data-gn-template-field="{$id}"
-                        data-keys="{string-join($template/values/key/@label, '$$$')}"
-                        data-values="{if ($keyValues and count($keyValues/*) > 0)
+            <textarea class="form-control gn-debug"
+                      name="{$id}"
+                      data-gn-template-field="{$id}"
+                      data-keys="{string-join($template/values/key/@label, '$$$')}"
+                      data-values="{if ($keyValues and count($keyValues/*) > 0)
                           then string-join($keyValues/field/value, '$$$') else ''}">
-                <xsl:if test="$isMissingLabel != ''">
-                  <xsl:attribute name="data-not-set-check" select="$tagId"/>
-                </xsl:if>
-                <xsl:value-of select="saxon:serialize($template/snippet[1]/*,
+              <xsl:if test="$isMissingLabel != ''">
+                <xsl:attribute name="data-not-set-check" select="$tagId"/>
+              </xsl:if>
+              <xsl:value-of select="saxon:serialize($template/snippet[1]/*,
                                       'default-serialize-mode')"/>
-              </textarea>
-            </div>
-          </xsl:if>
-        </div>
+            </textarea>
+          </div>
+        </xsl:if>
       </div>
       <xsl:if test="$refToDelete">
         <div class="col-sm-1 gn-control">
@@ -776,6 +789,7 @@
     <!-- Hide add element if child of an XLink section. -->
     <xsl:param name="isDisabled" select="ancestor::node()[@xlink:href]"/>
     <xsl:param name="isFirst" required="no" as="xs:boolean" select="true()"/>
+    <xsl:param name="isForceLabel" required="no" as="xs:boolean" select="false()"/>
     <xsl:param name="isHidden" required="no" as="xs:boolean" select="false()"/>
     <xsl:param name="name" required="no" as="xs:string" select="''"/>
     <xsl:param name="class" required="no" as="xs:string?" select="''"/>
@@ -793,13 +807,13 @@
 
       <!-- This element is replaced by the content received when clicking add -->
       <div
-        class="form-group gn-field {if ($isRequired) then 'gn-required' else ''} {if ($isFirst) then '' else 'gn-extra-field'} gn-add-field {if ($isHidden) then 'hidden' else ''} {$class}"
+        class="form-group gn-field {if ($isRequired and $isFirst) then 'gn-required' else ''} {if ($isFirst or $isForceLabel) then '' else 'gn-extra-field'} gn-add-field {if ($isHidden) then 'hidden' else ''} {$class}"
         id="gn-el-{$id}"
         data-gn-cardinality="{$childEditInfo/@min}-{$childEditInfo/@max}"
         data-gn-field-highlight="">
         <label class="col-sm-2 control-label"
                data-gn-field-tooltip="{$schema}|{$qualifiedName}|{$parentName}|">
-          <xsl:if test="normalize-space($label) != ''">
+          <xsl:if test="normalize-space($label) != '' and normalize-space($btnLabel)=''">
             <xsl:value-of select="$label"/>
           </xsl:if>
           &#160;
@@ -1587,7 +1601,7 @@
                   </xsl:when>
                   <!-- Form is inserted directly in the row. -->
                   <xsl:when test="@type = 'form'">
-                   <xsl:copy-of select="*"/>
+                    <xsl:copy-of select="*"/>
                   </xsl:when>
                   <xsl:when test="@readonly">
                     <xsl:value-of select="."/>
@@ -1606,7 +1620,7 @@
                         <xsl:choose>
                           <xsl:when test="@type = 'select'">
                             <select class="form-control"
-                                      name="{$name}">
+                                    name="{$name}">
                               <xsl:variable name="value"
                                             select="*/text()"/>
                               <option></option>
diff --git a/web/src/main/webapp/xslt/ui-metadata/form-configurator.xsl b/web/src/main/webapp/xslt/ui-metadata/form-configurator.xsl
index de52e8bc03..7c712d2e92 100644
--- a/web/src/main/webapp/xslt/ui-metadata/form-configurator.xsl
+++ b/web/src/main/webapp/xslt/ui-metadata/form-configurator.xsl
@@ -68,7 +68,7 @@
           <fieldset data-gn-field-highlight="" class="gn-{@name}">
             <!-- Get translation for labels.
             If labels contains ':', search into labels.xml. -->
-            <legend data-gn-slide-toggle="">
+            <legend data-gn-slide-toggle="{if ($isDisplayingSections = true()) then 'false' else 'true'}">
               <xsl:value-of
                 select="if (contains($sectionName, ':'))
                   then gn-fn-metadata:getLabel($schema, $sectionName, $labels)/label
@@ -341,27 +341,31 @@
           <xsl:if test="($nonExistingChildParent/* and not(@ifNotExist)) or
             ($nonExistingChildParent/* and count($nodes/*) = 0 and @ifNotExist)">
             <xsl:variable name="childName" select="@or"/>
+            <xsl:variable name="parentXpath" select="@in"/>
+            <xsl:variable name="xpath" select="@xpath"/>
 
             <xsl:for-each select="$nonExistingChildParent/*/gn:child[@name = $childName]">
               <xsl:variable name="name" select="concat(@prefix, ':', @name)"/>
-
-              <xsl:variable name="directive"
-                            select="gn-fn-metadata:getFieldAddDirective($editorConfig, $name)"/>
-
-              <xsl:variable name="labelConfig"
-                            select="gn-fn-metadata:getLabel($schema, $name, $labels)"/>
-              <xsl:call-template name="render-element-to-add">
-                <xsl:with-param name="label"
-                                select="if ($configName != '')
-                          then $strings/*[name() = $configName]
-                          else $labelConfig/label"/>
-                <xsl:with-param name="class" select="if ($labelConfig/class) then $labelConfig/class else ''"/>
-                <xsl:with-param name="btnLabel" select="if ($labelConfig/btnLabel) then $labelConfig/btnLabel else ''"/>
-                <xsl:with-param name="btnClass" select="if ($labelConfig/btnClass) then $labelConfig/btnClass else ''"/>
-                <xsl:with-param name="directive" select="$directive"/>
-                <xsl:with-param name="childEditInfo" select="."/>
-                <xsl:with-param name="parentEditInfo" select="../gn:element"/>
-              </xsl:call-template>
+              <xsl:if test="ends-with($xpath,$name) or not($xpath)">
+
+                <xsl:variable name="directive"
+                              select="gn-fn-metadata:getFieldAddDirective($editorConfig, $name)"/>
+
+                <xsl:variable name="labelConfig"
+                              select="gn-fn-metadata:getLabel($schema, $name, $labels)"/>
+                <xsl:call-template name="render-element-to-add">
+                  <xsl:with-param name="label"
+                                  select="if ($configName != '')
+	                          then $strings/*[name() = $configName]
+	                          else $labelConfig/label"/>
+                  <xsl:with-param name="class" select="if ($labelConfig/class) then $labelConfig/class else ''"/>
+                  <xsl:with-param name="btnLabel" select="if ($labelConfig/btnLabel) then $labelConfig/btnLabel else ''"/>
+                  <xsl:with-param name="btnClass" select="if ($labelConfig/btnClass) then $labelConfig/btnClass else ''"/>
+                  <xsl:with-param name="directive" select="$directive"/>
+                  <xsl:with-param name="childEditInfo" select="."/>
+                  <xsl:with-param name="parentEditInfo" select="../gn:element"/>
+                </xsl:call-template>
+              </xsl:if>
             </xsl:for-each>
           </xsl:if>
 
@@ -695,14 +699,14 @@
 
       <!-- If multiple elements $elementName contains multiple values. Use the first one in getLabel to avoid failure. -->
       <xsl:variable name="labelConfig"
-                    select="gn-fn-metadata:getLabel($schema, $elementName[1], $labels)"/>
+                    select="gn-fn-metadata:getLabel($schema, $elementName[1], $labels, '', '', concat(@in,'/',$elementName[1]))"/>
       <xsl:variable name="name"
                     select="if ($btnName != '')
                             then $btnName
                             else $labelConfig/label"/>
       <xsl:variable name="class" select="if (@class != '') then @class else $labelConfig/class"/>
       <xsl:variable name="btnLabel" select="if (@btnLabel != '') then @btnLabel else $labelConfig/btnLabel"/>
-      <xsl:variable name="btnClass" select="if (@btnClass != '') then @btnLabel else $labelConfig/btnClass"/>
+      <xsl:variable name="btnClass" select="if (@btnClass != '') then @btnClass else $labelConfig/btnClass"/>
       <xsl:variable name="btnLabelTranslation" select="$strings/*[name() = $btnLabel]"/>
 
       <xsl:choose>
@@ -743,7 +747,7 @@
               <xsl:with-param name="parentEditInfo" select="../gn:element"/>
               <xsl:with-param name="class" select="$class"/>
               <xsl:with-param name="btnClass" select="$btnClass"/>
-              <xsl:with-param name="btnLabel" select="$btnLabelTranslation"/>
+              <xsl:with-param name="btnLabel" select="if ($btnLabelTranslation != '') then $btnLabelTranslation else $btnLabel"/>
             </xsl:call-template>
           </xsl:for-each>
         </xsl:otherwise>
-- 
2.18.0.windows.1

